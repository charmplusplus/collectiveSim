module allGather {
  include "vector";
  readonly double alpha;
  readonly double beta;

  message allGatherMsg;

  array[1D] AllGather {
    entry AllGather(int size, int n, int type);
    entry[reductiontarget] void initdone(int num);
    entry void startGather();
    entry void recvRing(int sender, CkNcpyBuffer data, double recvTime);
    entry void local_buff_done(CkDataMsg *m);
    entry void Hypercube() {
      for(iter = 0; iter < numHypercubeIter; iter++) {
        serial { HypercubeToSend = thisIndex ^ ((int)pow(2, iter)); }
        if (HypercubeToSend < n) {
          serial {
#ifdef TIMESTAMP
            thisProxy(HypercubeToSend).recvHypercube(iter, hyperCubeStore, hyperCubeIndx, (timeStamp + alpha + beta * hyperCubeStore.size() * 8));
            timeStamp += alpha;
#else
            thisProxy(HypercubeToSend).recvHypercube(iter, hyperCubeStore, hyperCubeIndx, 0.0);
#endif
          }
          when recvHypercube[iter](int ref, std::vector<CkNcpyBuffer> data, std::vector<int> dataIndx, double recvTime) {
            serial {
              for(int m = 0; m < data.size(); m++) {
                hyperCubeStore.emplace_back(data[m]);
                hyperCubeIndx.emplace_back(dataIndx[m]);
                CkNcpyBuffer dst(store + dataIndx[m] * k, k * sizeof(long int), zero_copy_callback, CK_BUFFER_UNREG);
                dst.get(data[m]);
              }
#ifdef TIMESTAMP
              timeStamp = std::max(recvTime, timeStamp);
#endif
            }
          }
        }
      }
    };
    entry void recvHypercube(int ref, std::vector<CkNcpyBuffer> data, std::vector<int> dataIndx, double recvTime);
    entry void Flood(int sender, CkNcpyBuffer data, double recvTime);
  };
};
